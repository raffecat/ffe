
/*  A Bison parser, made from ../grammar.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	T_UNKNOWN	258
#define	T_IDENT	259
#define	T_PATH	260
#define	T_STRING	261
#define	T_INTEGER	262
#define	T_FLOAT	263
#define	T_BREAK	264
#define	T_CASE	265
#define	T_CATCH	266
#define	T_CONTINUE	267
#define	T_DEFAULT	268
#define	T_DELETE	269
#define	T_DO	270
#define	T_ELSE	271
#define	T_EXIT	272
#define	T_FOR	273
#define	T_FOREACH	274
#define	T_IF	275
#define	T_IN	276
#define	T_LOCK	277
#define	T_NEW	278
#define	T_NULL	279
#define	T_REPEAT	280
#define	T_RETURN	281
#define	T_SWITCH	282
#define	T_THIS	283
#define	T_THREAD	284
#define	T_THROW	285
#define	T_TRY	286
#define	T_UNTIL	287
#define	T_WHILE	288
#define	T_PLUS_A	289
#define	T_PLUS	290
#define	T_MINUS_A	291
#define	T_ARROW	292
#define	T_MINUS	293
#define	T_STAR_A	294
#define	T_STAR	295
#define	T_SLASH_A	296
#define	T_SLASH	297
#define	T_PERCENT_A	298
#define	T_PERCENT	299
#define	T_CARET_A	300
#define	T_CARET	301
#define	T_AND	302
#define	T_AMPER_A	303
#define	T_AMPER	304
#define	T_OR	305
#define	T_BAR_A	306
#define	T_BAR	307
#define	T_HASH_A	308
#define	T_HASH	309
#define	T_SHR_A	310
#define	T_SHR	311
#define	T_GREATER_EQ	312
#define	T_GREATER	313
#define	T_SHL_A	314
#define	T_SHL	315
#define	T_LESS_EQ	316
#define	T_LESS	317
#define	T_TILDE	318
#define	T_EQUAL	319
#define	T_RANGE	320
#define	T_DOT	321
#define	T_ASSIGN	322
#define	T_INHERIT	323
#define	T_COLON	324
#define	T_NOT_EQ	325
#define	T_BANG	326
#define	T_COMMA	327
#define	T_SEMI	328
#define	T_LPAREN	329
#define	T_RPAREN	330
#define	T_LBRACE	331
#define	T_RBRACE	332
#define	T_LBRACK	333
#define	T_RBRACK	334

#line 7 "../grammar.y"


#include "global.h"
#include "parse.h"
#include "runtime.h"
#include "any.h"
#include "string.h"

#define YYERROR_VERBOSE 1
#define YYDEBUG 1


#line 22 "../grammar.y"
typedef union {
	int r;
	stringp s;
	float64 f;
	int32 n;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		345
#define	YYFLAG		-32768
#define	YYNTBASE	80

#define YYTRANSLATE(x) ((unsigned)(x) <= 334 ? yytranslate[x] : 165)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     7,     8,    14,    15,    21,    22,    29,
    30,    33,    34,    36,    37,    39,    41,    45,    48,    50,
    53,    55,    58,    60,    62,    64,    66,    69,    72,    74,
    77,    79,    82,    83,    91,    92,    93,    97,    98,    99,
   107,   108,   109,   117,   118,   122,   123,   128,   130,   132,
   134,   136,   142,   148,   149,   150,   151,   164,   165,   174,
   176,   178,   180,   182,   183,   190,   194,   195,   199,   201,
   203,   206,   209,   210,   215,   216,   217,   224,   227,   228,
   230,   232,   236,   239,   242,   244,   245,   250,   252,   253,
   258,   260,   263,   265,   269,   273,   277,   281,   285,   289,
   291,   295,   299,   303,   307,   311,   315,   319,   323,   327,
   331,   335,   339,   341,   345,   347,   351,   353,   357,   359,
   363,   367,   369,   373,   377,   379,   383,   387,   391,   393,
   397,   399,   402,   405,   407,   409,   410,   416,   417,   424,
   428,   433,   435,   437,   439,   443,   445,   448,   449,   456,
   460,   461,   463,   465,   469,   471,   473,   475,   477,   479,
   481,   482,   487,   489,   491,   493,   495,   498,   500,   502,
   504,   506,   508,   510,   512,   514,   516,   518,   520,   522,
   524,   526,   528,   530,   532,   534,   536,   538,   540,   542,
   544,   546,   548,   550,   554,   556,   558,   561,   563,   566,
   568,   570,   571,   576,   577,   582,   584,   585,   587,   589,
   593,   594,   596,   600
};

static const short yyrhs[] = {    81,
     0,    81,    82,     0,    82,     0,     0,    78,     5,    79,
    83,    86,     0,     0,   157,    67,    84,   158,    87,     0,
     0,   157,    74,    85,    88,    75,    90,     0,     0,    37,
     5,     0,     0,    73,     0,     0,    89,     0,     4,     0,
    89,    72,     4,     0,    76,    91,     0,    77,     0,    92,
    77,     0,    93,     0,    92,    93,     0,    94,     0,    98,
     0,   108,     0,   115,     0,   118,    73,     0,   119,    73,
     0,   120,     0,   124,    73,     0,    90,     0,   126,    73,
     0,     0,    20,    74,   126,    75,    95,    93,    96,     0,
     0,     0,    16,    97,    93,     0,     0,     0,    33,    99,
    74,   126,    75,   100,   105,     0,     0,     0,    32,   101,
    74,   126,    75,   102,   106,     0,     0,    25,   103,    93,
     0,     0,    15,   104,    93,   107,     0,    73,     0,    93,
     0,    73,     0,    93,     0,    33,    74,   126,    75,    73,
     0,    32,    74,   126,    75,    73,     0,     0,     0,     0,
    18,    74,   125,   109,    73,   125,   110,    73,   125,   111,
    75,   113,     0,     0,    19,    74,     4,    21,   126,    75,
   112,   114,     0,    73,     0,    93,     0,    73,     0,    93,
     0,     0,    27,    74,   126,    75,   116,    90,     0,    10,
   154,    69,     0,     0,    13,   117,    69,     0,     9,     0,
    12,     0,    26,   125,     0,    17,   125,     0,     0,    31,
   121,    93,   122,     0,     0,     0,    11,    74,     4,    75,
   123,    93,     0,    14,   126,     0,     0,   126,     0,   127,
     0,   126,    65,   127,     0,   126,    65,     0,    65,   127,
     0,   129,     0,     0,   127,    50,   128,   129,     0,   131,
     0,     0,   129,    47,   130,   131,     0,   132,     0,    71,
   132,     0,   133,     0,   132,    64,   133,     0,   132,    70,
   133,     0,   132,    58,   133,     0,   132,    62,   133,     0,
   132,    57,   133,     0,   132,    61,   133,     0,   134,     0,
   134,    67,   133,     0,   134,    34,   133,     0,   134,    36,
   133,     0,   134,    39,   133,     0,   134,    41,   133,     0,
   134,    43,   133,     0,   134,    45,   133,     0,   134,    48,
   133,     0,   134,    51,   133,     0,   134,    53,   133,     0,
   134,    55,   133,     0,   134,    59,   133,     0,   135,     0,
   134,    52,   135,     0,   136,     0,   135,    49,   136,     0,
   137,     0,   136,    54,   137,     0,   138,     0,   137,    56,
   138,     0,   137,    60,   138,     0,   139,     0,   138,    35,
   139,     0,   138,    38,   139,     0,   140,     0,   139,    40,
   140,     0,   139,    42,   140,     0,   139,    44,   140,     0,
   141,     0,   140,    46,   141,     0,   142,     0,    63,   142,
     0,    38,   142,     0,   143,     0,   146,     0,     0,   143,
    74,   144,   150,    75,     0,     0,    29,   146,    74,   145,
   150,    75,     0,   143,    66,   156,     0,   143,    78,   126,
    79,     0,   147,     0,   148,     0,   152,     0,    28,    66,
   156,     0,     4,     0,    23,   156,     0,     0,    23,   156,
    74,   149,   151,    75,     0,    74,   126,    75,     0,     0,
   151,     0,   126,     0,   151,    72,   126,     0,     7,     0,
     8,     0,   155,     0,    28,     0,     5,     0,    24,     0,
     0,    78,   153,   150,    79,     0,     7,     0,     8,     0,
   155,     0,     6,     0,   155,     6,     0,     4,     0,     9,
     0,    10,     0,    11,     0,    12,     0,    13,     0,    14,
     0,    15,     0,    16,     0,    17,     0,    18,     0,    19,
     0,    20,     0,    21,     0,    22,     0,    23,     0,    24,
     0,    25,     0,    26,     0,    27,     0,    28,     0,    29,
     0,    30,     0,    31,     0,    32,     0,    33,     0,   157,
    38,   156,     0,   156,     0,     7,     0,    38,     7,     0,
     8,     0,    38,     8,     0,   155,     0,    24,     0,     0,
    78,   159,   161,    79,     0,     0,    76,   160,   163,    77,
     0,     5,     0,     0,   162,     0,   158,     0,   162,    72,
   158,     0,     0,   164,     0,   158,    69,   158,     0,   164,
    72,   158,    69,   158,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   136,   139,   140,   143,   144,   144,   144,   145,   145,   148,
   149,   152,   153,   156,   157,   160,   161,   164,   167,   168,
   171,   172,   175,   176,   177,   178,   179,   180,   181,   182,
   183,   184,   187,   187,   190,   191,   191,   194,   194,   196,
   196,   196,   198,   198,   198,   199,   199,   202,   203,   206,
   207,   210,   211,   214,   215,   216,   216,   217,   218,   221,
   222,   225,   226,   229,   230,   231,   232,   232,   235,   236,
   239,   240,   243,   243,   246,   247,   248,   250,   253,   254,
   257,   258,   259,   260,   263,   264,   264,   267,   268,   268,
   271,   272,   275,   276,   277,   278,   279,   280,   281,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   299,   300,   303,   304,   307,   308,   311,   312,
   313,   316,   317,   318,   321,   322,   323,   324,   327,   328,
   331,   332,   333,   336,   339,   340,   341,   342,   343,   344,
   345,   348,   351,   354,   355,   356,   357,   358,   359,   360,
   363,   364,   367,   368,   371,   372,   373,   374,   375,   376,
   377,   378,   381,   382,   383,   386,   387,   390,   391,   392,
   393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
   403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
   413,   414,   415,   418,   419,   422,   423,   424,   425,   426,
   427,   428,   428,   429,   429,   430,   433,   434,   437,   438,
   441,   442,   445,   446
};

static const char * const yytname[] = {   "$","error","$undefined.","T_UNKNOWN",
"T_IDENT","T_PATH","T_STRING","T_INTEGER","T_FLOAT","T_BREAK","T_CASE","T_CATCH",
"T_CONTINUE","T_DEFAULT","T_DELETE","T_DO","T_ELSE","T_EXIT","T_FOR","T_FOREACH",
"T_IF","T_IN","T_LOCK","T_NEW","T_NULL","T_REPEAT","T_RETURN","T_SWITCH","T_THIS",
"T_THREAD","T_THROW","T_TRY","T_UNTIL","T_WHILE","T_PLUS_A","T_PLUS","T_MINUS_A",
"T_ARROW","T_MINUS","T_STAR_A","T_STAR","T_SLASH_A","T_SLASH","T_PERCENT_A",
"T_PERCENT","T_CARET_A","T_CARET","T_AND","T_AMPER_A","T_AMPER","T_OR","T_BAR_A",
"T_BAR","T_HASH_A","T_HASH","T_SHR_A","T_SHR","T_GREATER_EQ","T_GREATER","T_SHL_A",
"T_SHL","T_LESS_EQ","T_LESS","T_TILDE","T_EQUAL","T_RANGE","T_DOT","T_ASSIGN",
"T_INHERIT","T_COLON","T_NOT_EQ","T_BANG","T_COMMA","T_SEMI","T_LPAREN","T_RPAREN",
"T_LBRACE","T_RBRACE","T_LBRACK","T_RBRACK","target","defns","defn","@1","@2",
"@3","oinherit","osemi","fargs","fargl","block","o_block","compound","stmt",
"if","@4","o_else","@5","while","@6","@7","@8","@9","@10","@11","o_while","o_until",
"o_do","for","@12","@13","@14","@15","o_for","o_forea","switch","@16","@17",
"break","return","try","@18","o_catch","@19","delete","o_expr","expr","expr1",
"@20","expr1a","@21","expr2","expr3","expr4","expr5","expr6","expr7","expr8",
"expr9","expr10","expr11","expr12","expr13","expr14","@22","@23","expr15","expr16",
"expr17","@24","invargs","invargl","literal","@25","caselit","strlit","member",
"attrib","declit","@26","@27","arrlit","arrlitl","maplit","maplitl",""
};
#endif

static const short yyr1[] = {     0,
    80,    81,    81,    83,    82,    84,    82,    85,    82,    86,
    86,    87,    87,    88,    88,    89,    89,    90,    91,    91,
    92,    92,    93,    93,    93,    93,    93,    93,    93,    93,
    93,    93,    95,    94,    96,    97,    96,    99,   100,    98,
   101,   102,    98,   103,    98,   104,    98,   105,   105,   106,
   106,   107,   107,   109,   110,   111,   108,   112,   108,   113,
   113,   114,   114,   116,   115,   115,   117,   115,   118,   118,
   119,   119,   121,   120,   122,   123,   122,   124,   125,   125,
   126,   126,   126,   126,   127,   128,   127,   129,   130,   129,
   131,   131,   132,   132,   132,   132,   132,   132,   132,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   134,   134,   135,   135,   136,   136,   137,   137,
   137,   138,   138,   138,   139,   139,   139,   139,   140,   140,
   141,   141,   141,   142,   143,   144,   143,   145,   143,   143,
   143,   146,   147,   148,   148,   148,   148,   149,   148,   148,
   150,   150,   151,   151,   152,   152,   152,   152,   152,   152,
   153,   152,   154,   154,   154,   155,   155,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,   157,   157,   158,   158,   158,   158,   158,
   158,   159,   158,   160,   158,   158,   161,   161,   162,   162,
   163,   163,   164,   164
};

static const short yyr2[] = {     0,
     1,     2,     1,     0,     5,     0,     5,     0,     6,     0,
     2,     0,     1,     0,     1,     1,     3,     2,     1,     2,
     1,     2,     1,     1,     1,     1,     2,     2,     1,     2,
     1,     2,     0,     7,     0,     0,     3,     0,     0,     7,
     0,     0,     7,     0,     3,     0,     4,     1,     1,     1,
     1,     5,     5,     0,     0,     0,    12,     0,     8,     1,
     1,     1,     1,     0,     6,     3,     0,     3,     1,     1,
     2,     2,     0,     4,     0,     0,     6,     2,     0,     1,
     1,     3,     2,     2,     1,     0,     4,     1,     0,     4,
     1,     2,     1,     3,     3,     3,     3,     3,     3,     1,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     1,     3,     1,     3,     1,     3,     1,     3,
     3,     1,     3,     3,     1,     3,     3,     3,     1,     3,
     1,     2,     2,     1,     1,     0,     5,     0,     6,     3,
     4,     1,     1,     1,     3,     1,     2,     0,     6,     3,
     0,     1,     1,     3,     1,     1,     1,     1,     1,     1,
     0,     4,     1,     1,     1,     1,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     1,     1,     2,     1,     2,     1,
     1,     0,     4,     0,     4,     1,     0,     1,     1,     3,
     0,     1,     3,     5
};

static const short yydefact[] = {     0,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   193,     0,     1,     3,   195,
     0,     0,     2,     0,     6,     8,     4,   194,     0,    14,
    10,   206,   166,   196,   198,   201,     0,   204,   202,   200,
    12,    16,     0,    15,     0,     5,   197,   199,   211,   207,
   167,    13,     7,     0,     0,    11,     0,     0,   212,   209,
     0,   208,     0,     9,    17,     0,   205,     0,   203,     0,
   146,   159,   155,   156,    69,     0,    70,    67,     0,    46,
    79,     0,     0,     0,     0,   160,    44,    79,     0,   158,
     0,    73,    41,    38,     0,     0,     0,     0,     0,    19,
   161,    31,    18,     0,    21,    23,    24,    25,    26,     0,
     0,    29,     0,     0,    81,    85,    88,    91,    93,   100,
   113,   115,   117,   119,   122,   125,   129,   131,   134,   135,
   142,   143,   144,   157,   213,     0,   210,   163,   164,     0,
   165,     0,    78,     0,    72,    80,    79,     0,     0,   147,
     0,    71,     0,     0,     0,     0,     0,     0,   133,   132,
    84,    92,     0,   151,    20,    22,    27,    28,    30,    83,
    32,    86,    89,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,     0,     0,    66,    68,     0,    54,
     0,     0,   148,    45,     0,   145,   138,    75,     0,     0,
   150,   153,     0,   152,    82,     0,     0,    98,    96,    99,
    97,    94,    95,   102,   103,   104,   105,   106,   107,   108,
   109,   114,   110,   111,   112,   101,   116,   118,   120,   121,
   123,   124,   126,   127,   128,   130,   140,   151,     0,   214,
     0,     0,    47,     0,     0,    33,     0,    64,   151,     0,
    74,     0,     0,   162,     0,    87,    90,     0,   141,     0,
     0,    79,     0,     0,     0,     0,     0,     0,    42,    39,
   154,   137,     0,     0,    55,    58,    35,   149,    65,   139,
     0,     0,     0,     0,     0,     0,     0,    36,    34,    76,
    50,    51,    43,    48,    49,    40,    53,    52,    79,    62,
    63,    59,     0,     0,    56,    37,    77,     0,     0,    60,
    61,    57,     0,     0,     0
};

static const short yydefgoto[] = {   343,
    28,    29,    41,    39,    40,    56,    63,    53,    54,   112,
   113,   114,   115,   116,   294,   319,   333,   117,   168,   313,
   167,   312,   161,   154,   326,   323,   273,   118,   274,   316,
   338,   317,   342,   332,   119,   296,   152,   120,   121,   122,
   166,   281,   334,   123,   155,   124,   125,   236,   126,   237,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   268,   279,   140,   141,   142,   277,   233,
   234,   143,   174,   150,   144,    30,    31,    51,    60,    59,
    71,    72,    68,    69
};

static const short yypact[] = {   683,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,     1,   683,-32768,-32768,
   -24,   -61,-32768,   822,-32768,-32768,-32768,-32768,    33,    31,
     0,-32768,-32768,-32768,-32768,-32768,    68,-32768,-32768,    43,
   -13,-32768,   -11,    32,   103,-32768,-32768,-32768,    33,    33,
-32768,-32768,-32768,    46,    69,-32768,    73,    61,    71,-32768,
    65,    75,    74,-32768,-32768,    33,-32768,    33,-32768,    33,
-32768,-32768,-32768,-32768,-32768,   122,-32768,-32768,   713,-32768,
   713,    72,    79,    85,   822,-32768,-32768,   713,    86,    83,
   150,-32768,-32768,-32768,   207,   207,   725,   751,   713,-32768,
-32768,-32768,-32768,   237,-32768,-32768,-32768,-32768,-32768,    88,
    89,-32768,    90,   -52,   114,   118,-32768,    57,-32768,   313,
   117,   115,   -41,    -2,   -10,   124,-32768,-32768,   -50,-32768,
-32768,-32768,-32768,    43,-32768,    99,-32768,-32768,-32768,   102,
    43,   106,   107,   612,-32768,   107,   713,   172,   713,   110,
   612,-32768,   713,   822,   111,   612,   119,   120,-32768,-32768,
   114,    57,   -20,   713,-32768,-32768,-32768,-32768,-32768,   725,
-32768,-32768,-32768,   751,   751,   751,   751,   751,   751,   751,
   751,   751,   751,   751,   751,   751,   751,   751,   751,   751,
   751,   751,   751,   751,   751,   751,   751,   751,   751,   751,
   751,   751,   822,-32768,   713,    33,-32768,-32768,    63,-32768,
   156,   -17,-32768,-32768,   -14,-32768,-32768,   169,   713,   713,
-32768,   107,   112,   109,   114,   725,   725,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   117,-32768,-32768,-32768,-32768,   115,   -41,    -2,    -2,
   -10,   -10,   124,   124,   124,-32768,-32768,   713,   -57,-32768,
   121,   125,-32768,   116,   713,-32768,   713,-32768,   713,   126,
-32768,   -12,    -9,-32768,   713,   118,-32768,   123,-32768,   713,
   713,   713,     2,   612,    -3,    46,   129,   188,-32768,-32768,
   107,-32768,    45,    48,-32768,-32768,   191,-32768,-32768,-32768,
   133,   312,   387,   136,   143,   144,   462,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   713,-32768,
-32768,-32768,   612,   612,-32768,-32768,-32768,   145,   537,-32768,
-32768,-32768,   218,   219,-32768
};

static const short yypgoto[] = {-32768,
-32768,   193,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -63,
-32768,-32768,  -107,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -95,   -89,   -90,-32768,    -7,-32768,
   -15,   130,   242,-32768,    25,    22,    35,   -81,   -91,   -78,
    36,    30,-32768,-32768,-32768,   152,-32768,-32768,-32768,  -256,
   -40,-32768,-32768,-32768,   -34,   -30,-32768,   -49,-32768,-32768,
-32768,-32768,-32768,-32768
};


#define	YYLAST		855


static const short yytable[] = {   153,
    74,   156,   162,    38,    50,    32,   176,   180,   156,    67,
    70,   288,   180,    34,   205,   213,   171,    37,   206,   173,
   181,   289,   297,   214,    50,    50,   145,   215,   146,   209,
   147,   210,   207,   211,    52,   208,    55,    42,    43,    44,
    45,    50,    35,    50,   180,    50,   219,   180,    61,    36,
   180,   151,   180,   224,   231,   180,    46,   276,   228,    62,
   278,   220,   299,    64,   160,   300,   180,   156,   285,   222,
    47,   308,    75,   225,    57,    58,   306,    81,    82,    43,
    83,    84,    85,    86,   232,    87,    88,    89,    90,   235,
    91,    92,    93,    94,   271,   272,    95,    96,    97,    98,
    99,   100,   101,    65,   102,   103,   104,    66,    48,   180,
    49,   105,   180,   184,   185,   261,   262,   186,   187,   314,
   188,    73,   315,   259,   260,   269,   189,    43,   148,   149,
   263,   264,   265,   226,   169,   170,   106,    77,   107,   282,
   283,    76,    78,    79,   108,   157,    80,   109,   164,    73,
   110,   111,   158,    81,    82,    43,    83,    84,   159,   163,
   177,   178,   179,   182,   183,   203,   270,   216,   204,   212,
   217,   180,    95,    96,   218,   221,   275,   100,   232,   280,
   285,    50,   267,   223,   227,   293,   307,   232,   292,   232,
   284,   311,   229,   230,   290,   301,   305,   302,   291,   298,
   303,   304,   156,   310,   322,   325,   318,   320,   327,   331,
    81,    82,    43,    83,    84,   328,   329,   344,   345,   339,
    33,   287,   252,   109,   257,   336,   337,   111,   286,    95,
    96,   341,   309,   335,   100,   101,   295,   172,   258,   156,
    81,    82,    43,    83,    84,    85,    86,   266,    87,    88,
    89,    90,   165,    91,    92,    93,    94,     0,     0,    95,
    96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
     0,     0,     0,     0,   105,     0,     0,     0,     0,     0,
   109,     0,     0,     0,   111,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   106,
     0,   107,     0,     0,     0,     0,     0,   108,     0,     0,
   109,     0,    73,   175,   111,    81,    82,    43,    83,    84,
    85,    86,     0,    87,    88,    89,    90,     0,    91,    92,
    93,    94,     0,     0,    95,    96,    97,    98,    99,   100,
   101,     0,   102,   103,   104,     0,   190,     0,   191,   105,
     0,   192,     0,   193,     0,   194,     0,   195,     0,     0,
   196,     0,     0,   197,   198,   199,     0,   200,     0,     0,
     0,   201,     0,     0,   106,     0,   107,     0,     0,   202,
     0,     0,   108,     0,   321,   109,     0,    73,     0,   111,
    81,    82,    43,    83,    84,    85,    86,     0,    87,    88,
    89,    90,     0,    91,    92,    93,    94,     0,     0,    95,
    96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
     0,     0,     0,     0,   105,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   251,     0,
   253,   254,   255,   256,     0,     0,     0,     0,     0,   106,
     0,   107,     0,     0,     0,     0,     0,   108,     0,   324,
   109,     0,    73,     0,   111,    81,    82,    43,    83,    84,
    85,    86,     0,    87,    88,    89,    90,     0,    91,    92,
    93,    94,     0,     0,    95,    96,    97,    98,    99,   100,
   101,     0,   102,   103,   104,     0,     0,     0,     0,   105,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   106,     0,   107,     0,     0,     0,
     0,     0,   108,     0,   330,   109,     0,    73,     0,   111,
    81,    82,    43,    83,    84,    85,    86,     0,    87,    88,
    89,    90,     0,    91,    92,    93,    94,     0,     0,    95,
    96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
     0,     0,     0,     0,   105,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   106,
     0,   107,     0,     0,     0,     0,     0,   108,     0,   340,
   109,     0,    73,     0,   111,    81,    82,    43,    83,    84,
    85,    86,     0,    87,    88,    89,    90,     0,    91,    92,
    93,    94,     0,     0,    95,    96,    97,    98,    99,   100,
   101,     0,   102,   103,   104,     0,     0,     0,     0,   105,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   106,     0,   107,     0,     0,     0,
     0,     0,   108,     0,     0,   109,     1,    73,     0,   111,
     0,     2,     3,     4,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    81,    82,    43,    83,
    84,     0,     0,     0,     0,     0,     0,     0,    81,    82,
    43,    83,    84,     0,     0,    95,    96,     0,     0,     0,
   100,   101,     0,     0,     0,     0,     0,    95,    96,     0,
   105,     0,   100,   101,    81,    82,    43,    83,    84,     0,
    27,     0,   105,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    95,    96,   106,     0,   107,   100,   101,
     0,     0,     0,   108,     0,     0,   109,   106,   105,     0,
   111,     0,     0,     0,     0,   108,     0,     0,   109,     0,
     0,     0,   111,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   106,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   109,     1,     0,     0,   111,     0,
     2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26
};

static const short yycheck[] = {    89,
    64,    91,    98,    34,    39,     5,   114,    65,    98,    59,
    60,   268,    65,    38,    56,    66,   107,    79,    60,   109,
    73,    79,   279,    74,    59,    60,    76,    78,    78,    40,
    80,    42,    35,    44,     4,    38,    37,     5,     6,     7,
     8,    76,    67,    78,    65,    80,   154,    65,     6,    74,
    65,    86,    65,   161,    75,    65,    24,    75,   166,    73,
    75,   157,    75,    75,    95,    75,    65,   157,    72,   159,
    38,    75,     4,   163,     7,     8,    75,     4,     5,     6,
     7,     8,     9,    10,   174,    12,    13,    14,    15,   180,
    17,    18,    19,    20,    32,    33,    23,    24,    25,    26,
    27,    28,    29,    72,    31,    32,    33,     5,    76,    65,
    78,    38,    65,    57,    58,   207,   208,    61,    62,    75,
    64,    76,    75,   205,   206,   215,    70,     6,     7,     8,
   209,   210,   211,   164,   105,   106,    63,    77,    65,   229,
   230,    69,    72,    79,    71,    74,    72,    74,    66,    76,
    77,    78,    74,     4,     5,     6,     7,     8,    74,    74,
    73,    73,    73,    50,    47,    49,   216,    69,    54,    46,
    69,    65,    23,    24,    69,     4,    21,    28,   268,    11,
    72,   216,   213,    74,    74,   275,   294,   277,    73,   279,
    79,     4,    74,    74,    74,   285,   292,    75,    74,    74,
   290,   291,   292,    75,   312,   313,    16,    75,    73,   317,
     4,     5,     6,     7,     8,    73,    73,     0,     0,    75,
    28,   237,   198,    74,   203,   333,   334,    78,   236,    23,
    24,   339,   296,   329,    28,    29,   277,   108,   204,   329,
     4,     5,     6,     7,     8,     9,    10,   212,    12,    13,
    14,    15,   101,    17,    18,    19,    20,    -1,    -1,    23,
    24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
    74,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,
    74,    -1,    76,    77,    78,     4,     5,     6,     7,     8,
     9,    10,    -1,    12,    13,    14,    15,    -1,    17,    18,
    19,    20,    -1,    -1,    23,    24,    25,    26,    27,    28,
    29,    -1,    31,    32,    33,    -1,    34,    -1,    36,    38,
    -1,    39,    -1,    41,    -1,    43,    -1,    45,    -1,    -1,
    48,    -1,    -1,    51,    52,    53,    -1,    55,    -1,    -1,
    -1,    59,    -1,    -1,    63,    -1,    65,    -1,    -1,    67,
    -1,    -1,    71,    -1,    73,    74,    -1,    76,    -1,    78,
     4,     5,     6,     7,     8,     9,    10,    -1,    12,    13,
    14,    15,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
    -1,    -1,    -1,    -1,    38,   184,   185,   186,   187,   188,
   189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
   199,   200,   201,   202,    -1,    -1,    -1,    -1,    -1,    63,
    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    -1,    73,
    74,    -1,    76,    -1,    78,     4,     5,     6,     7,     8,
     9,    10,    -1,    12,    13,    14,    15,    -1,    17,    18,
    19,    20,    -1,    -1,    23,    24,    25,    26,    27,    28,
    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    63,    -1,    65,    -1,    -1,    -1,
    -1,    -1,    71,    -1,    73,    74,    -1,    76,    -1,    78,
     4,     5,     6,     7,     8,     9,    10,    -1,    12,    13,
    14,    15,    -1,    17,    18,    19,    20,    -1,    -1,    23,
    24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    -1,    73,
    74,    -1,    76,    -1,    78,     4,     5,     6,     7,     8,
     9,    10,    -1,    12,    13,    14,    15,    -1,    17,    18,
    19,    20,    -1,    -1,    23,    24,    25,    26,    27,    28,
    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    63,    -1,    65,    -1,    -1,    -1,
    -1,    -1,    71,    -1,    -1,    74,     4,    76,    -1,    78,
    -1,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,     4,     5,     6,     7,
     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,
     6,     7,     8,    -1,    -1,    23,    24,    -1,    -1,    -1,
    28,    29,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
    38,    -1,    28,    29,     4,     5,     6,     7,     8,    -1,
    78,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    23,    24,    63,    -1,    65,    28,    29,
    -1,    -1,    -1,    71,    -1,    -1,    74,    63,    38,    -1,
    78,    -1,    -1,    -1,    -1,    71,    -1,    -1,    74,    -1,
    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    74,     4,    -1,    -1,    78,    -1,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 136 "../grammar.y"
{ YYACCEPT; ;
    break;}
case 4:
#line 143 "../grammar.y"
{ P_SelectObject(yyvsp[-1].s); ;
    break;}
case 6:
#line 144 "../grammar.y"
{ P_BeginAttr(yyvsp[-1].s); ;
    break;}
case 7:
#line 144 "../grammar.y"
{ P_EndAttr(); ;
    break;}
case 8:
#line 145 "../grammar.y"
{ P_Function(yyvsp[-1].s); ;
    break;}
case 9:
#line 145 "../grammar.y"
{ P_EndFunction(); ;
    break;}
case 11:
#line 149 "../grammar.y"
{ P_Inherit(yyvsp[0].s); ;
    break;}
case 16:
#line 160 "../grammar.y"
{ P_FunctionArg(yyvsp[0].s); ;
    break;}
case 17:
#line 161 "../grammar.y"
{ P_FunctionArg(yyvsp[0].s); ;
    break;}
case 21:
#line 171 "../grammar.y"
{ P_EndStmt(); ;
    break;}
case 22:
#line 172 "../grammar.y"
{ P_EndStmt(); ;
    break;}
case 25:
#line 177 "../grammar.y"
{ /* ignore value */ ;
    break;}
case 32:
#line 184 "../grammar.y"
{ P_EndExpr(yyvsp[-1].r); ;
    break;}
case 33:
#line 187 "../grammar.y"
{ P_If(yyvsp[-1].r); ;
    break;}
case 35:
#line 190 "../grammar.y"
{ P_EndIf(); ;
    break;}
case 36:
#line 191 "../grammar.y"
{ P_Else(); ;
    break;}
case 37:
#line 191 "../grammar.y"
{ P_EndIf(); ;
    break;}
case 38:
#line 194 "../grammar.y"
{ P_While(); ;
    break;}
case 39:
#line 195 "../grammar.y"
{ P_WhileExpr(yyvsp[-1].r); ;
    break;}
case 41:
#line 196 "../grammar.y"
{ P_Until(); ;
    break;}
case 42:
#line 197 "../grammar.y"
{ P_UntilExpr(yyvsp[-1].r); ;
    break;}
case 44:
#line 198 "../grammar.y"
{ P_Repeat(); ;
    break;}
case 45:
#line 198 "../grammar.y"
{ P_RepeatEnd(); ;
    break;}
case 46:
#line 199 "../grammar.y"
{ P_Do(); ;
    break;}
case 48:
#line 202 "../grammar.y"
{ P_WhileEnd(); ;
    break;}
case 49:
#line 203 "../grammar.y"
{ P_WhileEnd(); ;
    break;}
case 50:
#line 206 "../grammar.y"
{ P_UntilEnd(); ;
    break;}
case 51:
#line 207 "../grammar.y"
{ P_UntilEnd(); ;
    break;}
case 52:
#line 210 "../grammar.y"
{ P_DoWhile(yyvsp[-2].r); ;
    break;}
case 53:
#line 211 "../grammar.y"
{ P_DoUntil(yyvsp[-2].r); ;
    break;}
case 54:
#line 214 "../grammar.y"
{ P_ForInit(yyvsp[0].r); ;
    break;}
case 55:
#line 215 "../grammar.y"
{ P_ForCondition(yyvsp[0].r); ;
    break;}
case 56:
#line 216 "../grammar.y"
{ P_ForInc(yyvsp[0].r); ;
    break;}
case 57:
#line 216 "../grammar.y"
{ /* do nothing */ ;
    break;}
case 58:
#line 218 "../grammar.y"
{ P_ForEach(yyvsp[-3].s, yyvsp[-1].r); ;
    break;}
case 59:
#line 218 "../grammar.y"
{ P_EndForEach(yyvsp[-5].s, yyvsp[-3].r); ;
    break;}
case 60:
#line 221 "../grammar.y"
{ P_EndFor(); ;
    break;}
case 61:
#line 222 "../grammar.y"
{ P_EndFor(); ;
    break;}
case 64:
#line 229 "../grammar.y"
{ P_Switch(yyvsp[-1].r); ;
    break;}
case 65:
#line 230 "../grammar.y"
{ P_EndSwitch(); ;
    break;}
case 66:
#line 231 "../grammar.y"
{ /* do nothing */ ;
    break;}
case 67:
#line 232 "../grammar.y"
{ P_SwitchDefault(); ;
    break;}
case 68:
#line 232 "../grammar.y"
{ /* do nothing */ ;
    break;}
case 69:
#line 235 "../grammar.y"
{ P_Break(); ;
    break;}
case 70:
#line 236 "../grammar.y"
{ P_Continue(); ;
    break;}
case 71:
#line 239 "../grammar.y"
{ P_Return(yyvsp[0].r); ;
    break;}
case 72:
#line 240 "../grammar.y"
{ P_Exit(yyvsp[0].r); ;
    break;}
case 73:
#line 243 "../grammar.y"
{ P_Try(); ;
    break;}
case 74:
#line 243 "../grammar.y"
{ P_EndCatch(); ;
    break;}
case 76:
#line 247 "../grammar.y"
{ P_Catch(yyvsp[-1].s); ;
    break;}
case 78:
#line 250 "../grammar.y"
{ P_Delete(yyvsp[0].r); ;
    break;}
case 79:
#line 253 "../grammar.y"
{ yyval.r = INVALID_REGISTER; ;
    break;}
case 82:
#line 258 "../grammar.y"
{ yyval.r = P_Range(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 83:
#line 259 "../grammar.y"
{ yyval.r = P_Range(yyvsp[-1].r, INVALID_REGISTER); ;
    break;}
case 84:
#line 260 "../grammar.y"
{ yyval.r = P_Range(INVALID_REGISTER, yyvsp[0].r); ;
    break;}
case 86:
#line 264 "../grammar.y"
{ P_Or(yyvsp[-1].r); ;
    break;}
case 87:
#line 264 "../grammar.y"
{ yyval.r = P_EndOr(yyvsp[0].r); ;
    break;}
case 89:
#line 268 "../grammar.y"
{ P_And(yyvsp[-1].r); ;
    break;}
case 90:
#line 268 "../grammar.y"
{ yyval.r = P_EndAnd(yyvsp[0].r); ;
    break;}
case 92:
#line 272 "../grammar.y"
{ yyval.r = P_Not(yyvsp[0].r); ;
    break;}
case 94:
#line 276 "../grammar.y"
{ yyval.r = P_Equal(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 95:
#line 277 "../grammar.y"
{ yyval.r = P_NotEq(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 96:
#line 278 "../grammar.y"
{ yyval.r = P_Greater(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 97:
#line 279 "../grammar.y"
{ yyval.r = P_Less(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 98:
#line 280 "../grammar.y"
{ yyval.r = P_GreaterEq(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 99:
#line 281 "../grammar.y"
{ yyval.r = P_LessEq(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 101:
#line 285 "../grammar.y"
{ yyval.r = P_Assign(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 102:
#line 286 "../grammar.y"
{ yyval.r = P_Plus(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 103:
#line 287 "../grammar.y"
{ yyval.r = P_Minus(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 104:
#line 288 "../grammar.y"
{ yyval.r = P_Star(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 105:
#line 289 "../grammar.y"
{ yyval.r = P_Slash(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 106:
#line 290 "../grammar.y"
{ yyval.r = P_Percent(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 107:
#line 291 "../grammar.y"
{ yyval.r = P_Caret(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 108:
#line 292 "../grammar.y"
{ yyval.r = P_Amper(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 109:
#line 293 "../grammar.y"
{ yyval.r = P_Bar(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 110:
#line 294 "../grammar.y"
{ yyval.r = P_Hash(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 111:
#line 295 "../grammar.y"
{ yyval.r = P_Shr(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 112:
#line 296 "../grammar.y"
{ yyval.r = P_Shl(yyvsp[-2].r, yyvsp[0].r); yyval.r = P_Assign(yyvsp[-2].r, yyval.r); ;
    break;}
case 114:
#line 300 "../grammar.y"
{ yyval.r = P_Bar(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 116:
#line 304 "../grammar.y"
{ yyval.r = P_Amper(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 118:
#line 308 "../grammar.y"
{ yyval.r = P_Hash(yyvsp[-2].r, yyvsp[0].r);;
    break;}
case 120:
#line 312 "../grammar.y"
{ yyval.r = P_Shr(yyvsp[-2].r, yyvsp[0].r);;
    break;}
case 121:
#line 313 "../grammar.y"
{ yyval.r = P_Shl(yyvsp[-2].r, yyvsp[0].r);;
    break;}
case 123:
#line 317 "../grammar.y"
{ yyval.r = P_Plus(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 124:
#line 318 "../grammar.y"
{ yyval.r = P_Minus(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 126:
#line 322 "../grammar.y"
{ yyval.r = P_Star(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 127:
#line 323 "../grammar.y"
{ yyval.r = P_Slash(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 128:
#line 324 "../grammar.y"
{ yyval.r = P_Percent(yyvsp[-2].r, yyvsp[0].r); ;
    break;}
case 130:
#line 328 "../grammar.y"
{ yyval.r = P_Caret(yyvsp[-2].r, yyvsp[0].r);;
    break;}
case 132:
#line 332 "../grammar.y"
{ yyval.r = P_UTilde(yyvsp[0].r); ;
    break;}
case 133:
#line 333 "../grammar.y"
{ yyval.r = P_UMinus(yyvsp[0].r); ;
    break;}
case 136:
#line 340 "../grammar.y"
{ P_Invoke(); ;
    break;}
case 137:
#line 341 "../grammar.y"
{ yyval.r = P_EndInvoke(yyvsp[-4].r, false); ;
    break;}
case 138:
#line 342 "../grammar.y"
{ P_Invoke(); ;
    break;}
case 139:
#line 343 "../grammar.y"
{ yyval.r = P_EndInvoke(yyvsp[-4].r, true); ;
    break;}
case 140:
#line 344 "../grammar.y"
{ yyval.r = P_Access(yyvsp[-2].r, yyvsp[0].s); ;
    break;}
case 141:
#line 345 "../grammar.y"
{ yyval.r = P_Index(yyvsp[-3].r, yyvsp[-1].r); ;
    break;}
case 145:
#line 355 "../grammar.y"
{ yyval.r = P_Lookup(yyvsp[0].s); ;
    break;}
case 146:
#line 356 "../grammar.y"
{ yyval.r = P_Local(yyvsp[0].s); ;
    break;}
case 147:
#line 357 "../grammar.y"
{ P_New(yyvsp[0].s); yyval.r = P_EndNew(); ;
    break;}
case 148:
#line 358 "../grammar.y"
{ P_New(yyvsp[-1].s); ;
    break;}
case 149:
#line 359 "../grammar.y"
{ yyval.r = P_EndNew(); ;
    break;}
case 150:
#line 360 "../grammar.y"
{ yyval.r = yyvsp[-1].r; ;
    break;}
case 153:
#line 367 "../grammar.y"
{ P_ListItem(yyvsp[0].r); ;
    break;}
case 154:
#line 368 "../grammar.y"
{ P_ListItem(yyvsp[0].r); ;
    break;}
case 155:
#line 371 "../grammar.y"
{ yyval.r = P_AddIntConst(yyvsp[0].n); ;
    break;}
case 156:
#line 372 "../grammar.y"
{ yyval.r = P_AddFloatConst(yyvsp[0].f); ;
    break;}
case 157:
#line 373 "../grammar.y"
{ yyval.r = P_AddStringConst(yyvsp[0].s); ;
    break;}
case 158:
#line 374 "../grammar.y"
{ yyval.r = P_AddThisConst(); ;
    break;}
case 159:
#line 375 "../grammar.y"
{ yyval.r = P_AddPathConst(yyvsp[0].s); ;
    break;}
case 160:
#line 376 "../grammar.y"
{ yyval.r = P_AddNullConst(); ;
    break;}
case 161:
#line 377 "../grammar.y"
{ P_BuildList(); ;
    break;}
case 162:
#line 378 "../grammar.y"
{ yyval.r = P_EndListMap(); ;
    break;}
case 163:
#line 381 "../grammar.y"
{ P_SwitchCaseInt(yyvsp[0].n); ;
    break;}
case 164:
#line 382 "../grammar.y"
{ P_SwitchCaseFloat(yyvsp[0].f); ;
    break;}
case 165:
#line 383 "../grammar.y"
{ P_SwitchCaseString(yyvsp[0].s); ;
    break;}
case 166:
#line 386 "../grammar.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 167:
#line 387 "../grammar.y"
{ yyval.s = yyvsp[-1].s; yyval.s->Append(yyvsp[0].s); ;
    break;}
case 194:
#line 418 "../grammar.y"
{ yyval.s = yyvsp[-2].s; yyval.s->AppendCStr("-"); yyval.s->Append(yyvsp[0].s); ;
    break;}
case 195:
#line 419 "../grammar.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 196:
#line 422 "../grammar.y"
{ P_AttrInt(yyvsp[0].n, 1); ;
    break;}
case 197:
#line 423 "../grammar.y"
{ P_AttrInt(yyvsp[0].n, -1); ;
    break;}
case 198:
#line 424 "../grammar.y"
{ P_AttrFloat(yyvsp[0].f, 1); ;
    break;}
case 199:
#line 425 "../grammar.y"
{ P_AttrFloat(yyvsp[0].f, -1); ;
    break;}
case 200:
#line 426 "../grammar.y"
{ P_AttrStr(yyvsp[0].s); ;
    break;}
case 201:
#line 427 "../grammar.y"
{ P_AttrNull(); ;
    break;}
case 202:
#line 428 "../grammar.y"
{ P_AttrList(); ;
    break;}
case 203:
#line 428 "../grammar.y"
{ P_EndAttrListMap(); ;
    break;}
case 204:
#line 429 "../grammar.y"
{ P_AttrMap(); ;
    break;}
case 205:
#line 429 "../grammar.y"
{ P_EndAttrListMap(); ;
    break;}
case 206:
#line 430 "../grammar.y"
{ P_AttrRef(yyvsp[0].s); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 449 "../grammar.y"

